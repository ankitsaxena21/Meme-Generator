{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","class","href","height","src","alt","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","assertThisInitialized","handleSubmit","_this2","fetch","then","response","json","memes","data","setState","event","_event$target","target","name","value","defineProperty","preventDefault","randomNum","Math","floor","random","length","randomMemeUrl","url","onSubmit","type","placeholder","onChange","Component","App","src_Header","src_MemeGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6LAgBeA,MAdf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,eAAeC,KAAK,KAC3BL,EAAAC,EAAAC,cAAA,OACEI,OAAO,OACPC,IAAI,iEACJC,IAAI,cAERR,EAAAC,EAAAC,cAAA,KAAGE,MAAM,eAAeC,KAAK,KAA7B,qEC2DSI,cAnEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEfX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACpBA,EAAKe,aAAef,EAAKe,aAAaF,KAAlBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KATRA,mFAWM,IAAAgB,EAAAb,KAClBc,MAAM,qCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAY,IACRE,EAAUF,EAASG,KAAnBD,MACRL,EAAKO,SAAS,CACZZ,YAAaU,2CAIRG,GAAO,IAAAC,EACMD,EAAME,OAAtBC,EADUF,EACVE,KAAMC,EADIH,EACJG,MACdzB,KAAKoB,SAALtB,OAAA4B,EAAA,EAAA5B,CAAA,GACG0B,EAAOC,yCAGCJ,GACXA,EAAMM,iBACN,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAW/B,KAAKI,MAAMI,YAAYwB,QAC9DC,EAAgBjC,KAAKI,MAAMI,YAAYoB,GAAWM,IACxDlC,KAAKoB,SAAS,CACZb,UAAW0B,qCAIb,OACE9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qEAAqE6C,SAAUnC,KAAKY,cAClGzB,EAAAC,EAAAC,cAAA,SACEC,UAAU,oBACV8C,KAAK,OACLZ,KAAK,UACLC,MAAOzB,KAAKI,MAAMC,QAClBgC,YAAY,WACZC,SAAUtC,KAAKS,eAEjBtB,EAAAC,EAAAC,cAAA,SACEC,UAAU,oBACV8C,KAAK,OACLZ,KAAK,aACLC,MAAOzB,KAAKI,MAAME,WAClB+B,YAAY,cACZC,SAAUtC,KAAKS,eAEjBtB,EAAAC,EAAAC,cAAA,UAAQE,MAAM,mBAAd,aAEFJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKM,KAAKI,MAAMG,UAAWZ,IAAI,gBACpCR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAOU,KAAKI,MAAMC,SAChClB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUU,KAAKI,MAAME,qBA7DjBiC,mBCcbC,MATf,WACE,OACErD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAACqD,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.d3dbaedd.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <nav className=\"navbar ml-auto navbar-dark bg-dark\">\n      <a class=\"navbar-brand\" href=\"#\">\n        <img\n          height=\"60vh\"\n          src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\n          alt=\"Problem?\"\n        /></a>\n      <a class=\"navbar-brand\" href=\"#\">Meme Generator</a>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(response => response.json())\n      .then(response => {\n        const { memes } = response.data;\n        this.setState({\n          allMemeImgs: memes\n        });\n      });\n  }\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    const randomNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    const randomMemeUrl = this.state.allMemeImgs[randomNum].url;\n    this.setState({\n      randomImg: randomMemeUrl\n    });\n  }\n  render() {\n    return (\n      <div>\n        <form className=\"form-group container justify-content-center col-lg-6 col-sm-6 mt-4\" onSubmit={this.handleSubmit}>\n          <input\n            className=\"form-control mb-3\"\n            type=\"text\"\n            name=\"topText\"\n            value={this.state.topText}\n            placeholder=\"Top Text\"\n            onChange={this.handleChange}\n          />\n          <input\n            className=\"form-control mb-2\"\n            type=\"text\"\n            name=\"bottomText\"\n            value={this.state.bottomText}\n            placeholder=\"Bottom Text\"\n            onChange={this.handleChange}\n          />\n          <button class=\"btn btn-primary\">Generate</button>\n        </form>\n        <div className=\"meme\">\n          <img src={this.state.randomImg} alt=\"Random meme\" />\n          <h2 className=\"top\">{this.state.topText}</h2>\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MemeGenerator;\n","import React from \"react\";\n\nimport Header from \"./Header\";\nimport MemeGenerator from \"./MemeGenerator\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}